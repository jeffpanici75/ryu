THINGS TO DO
------------

Project & Admin tasks
---------------------

- Flesh out README.md for GitHub

- Create website for Ryu project

Thoughts & Questions
----------------------

- should we create our own meta-layer instead of using rttr?
    * some kind of pre-processor
    * should the meta-code live inside C++ source?  painful, if so

- should we add a "clear symbols" command?

- should we clear the symbol table during close project?

- should ROM even be write protected during "development"?
    * should we issue errors when trying to write unlatched ROM
    * maybe the write latch should be disabled only during emulation/distribution
    * OR maybe the write latch is controlled through the environment file


[feature/tools] IDE UI & related tasks
--------------------------------------

- BUG/Design: input_action is just using a vector to store things now, but isn't ordered by action_sink_type
                -AND- does it make sense to switch to a map of name to action handlers?

                -AND- does the override approach really make sense as is?

- machine_editor::controller:
    - column_pick_list and top_panel not laying out correctly

- figure out how to surface errors & other messages for display in editors, e.g. source_editor, memory_editor.

- implement core::observable model so the UI can register to receive events from the underlying model

- implement full & correct project editor interface + shortcut selection UI

- implement palette editor

- implement tile/sprite editor

- implement preferences UI

- look for good tab-like bitmaps instead of poly draws

- mouse event bindings

- bug: console header, project and machine fields not properly resizing

- bug: environment::on_evaluate isn't handling negative number properly

- pick_list:
    1. search in list by typing
    2. page up/page down

- column_pick_list:
    1. render scrolling indicators and maybe "page x of y, row z" type footer
    2. search in the list by typing
    3. page up/page down actions

[feature/piece-table] Document Data Structure
----------------------------------------------

- BUG: redo is broken

- BUG: console::on_draw needs to handle non-adjacent spans properly

- BUG: delete "empty" space between non-adjacent piece nodes

- MISSING: piece_table::overwrite_at

- FINISH: document/piece_table checkpoint implementation

- implement a proper piece_table::load a/k/a document_formatter?

- implement columnar mode on document

- implement console::cut

- implement console::copy

- implement console::paste

- implement console::select

- rework text_editor::on_draw to use new document

- implement text_editor::cut

- implement text_editor::copy

- implement text_editor::paste

- implement text_editor::select

- rework text_box::on_draw to use new document

- fix text_box event handling


Lower Priority Clean-up tasks
-----------------------------

- refactor once_column_t struct to live with his table buddies and make more generic

- add serialize interface for use by ast_node_t and apply to value structs

- implement ability to redirect to new or appended text file in core::console

- implement pratt parsers for operators

Emulator & related tasks
------------------------

- implement integrated_circuit subclass for midway_mcr_video_generator that displays background map of tiles &
  foreground layer of sprites, controller initially through memory_editor & commands

- implement integrated_circuit subclass for joystick input

DONE
----
- create new struct that packages up source text/stream to parse, chunked lines, and formatted lines
- core::environment now has fields for core::command_parser and core::evaluator and optimized assignment of
  symbol table and assembler pointers to these instances.
- OFFSTREAM: categorize help and ordering so they're consistent
- OFFSTREAM: added @[.b|.w|.dw] for peek
- OFFSTREAM: added ^[.b|.w|.dw] for poke
- OFFSTREAM: implemented core::environment::fill_memory
- implement a target command so that assembly isn't necessarily required
- implement help [cmd] detail variant
- implement core::environment::on_read_binary_to_memory
- OFF STREAM|FIXED: fmt::format should recognize our custom types because we have a std::ostream operator<< override.
                    however, it isn't working the way I'd expect, so need to research.
                    SOLUTION: was missing #include <fmt/ostream.h>
- OFF STREAM|FIXED: core::console now formats styled text correctly!
- OFF STREAM      : more behavior in console is now optional and activated by using the @| operator
- OFF STREAM      : added @> and @>> redirection operators to console commands
- OFF STREAM|FIXED: font_family::add_style now uses space to get a proper width measurement
- OFF STREAM|FIXED: core::console and core::text_editor now measure the chunks to get the most accurate width
- OFF STREAM      : updated to latest Hack font TTF files
- OFF STREAM|FIXED: parser wasn't setting _token to nullptr in reset.
- OFF STREAM      : implement dip_switch subclass for integrated_circuit
- implement core::environment::on_write_memory_to_binary
- implement core::environment::on_copy_memory
- implement core::environment::on_search_memory
- implement core::environment::on_memory_map to dump
  out the memory map of the active machine
- OFF STREAM|FIXED: BUG: parser is skipping first character of identifier
                           EXAMPLE: set debug true
                           NOTE: looks to be related to the text "debug"; not sure why
                           RESULT: parser is seeing "ebug"
- OFF STREAM      : when switching env, actually assemble file
- OFF STREAM      : implement edenv command
- OFF STREAM|FIXED: % command working again for source editor and environments
- implement remaining memory commands in core::environment
- add . a/k/a "source" command that calls apply_environment again on the currently active environment
- Add Ryu & other project information to Twitch profile & banner bitmap
- configure weechat to limit width of handles to prevent column scrunching
- unit tests!?  whaaaaaa you SAY?  OMG!  NOOOOOO!
- OFF STREAM      : cleaned up piece_table_t and related interfaces
- OFF STREAM      : implement most of delete_at.  one case remaining where delete crosses pieces.
- core::piece_table_t: undo/redo
    * rename insert to insert_at for consistency
    * reworking insert_at & delete_at to make copies and swap chains
    * remove std::list<> and use std::shared_ptr<core::piece_node_t> instead for doubly-linked list
- core::piece_table_t: undo/redo
- core::piece_table_t: selection (includes marks)/cut/copy/paste
- turn off irc events in weechat
- finish delete_at span multiple pieces scenario
- piece_table_t::copy requires custom version of sequence/copy_elements
- move attr_t and related structs to core_types.h
- OFF STREAM      : add unit tests for cut
- OFF STREAM      : add unit tests for paste selection
- OFF STREAM      : add unit tests for delete selection
- core::formatted_text_t vs core::attr_span_t
- refactor console's write_message to remove "code" lookup
- BUG: how to handle gap piece between end of piece table and far new offset
- OFF STREAM      : MISSING: swap_deleted_node needs to fix-up line head/tail pair
- BUG: document rendering doesn't work with horizontal scrolling
- BUG: inserting at the head of a line appears to be broken
- BUG: inserting into the middle of a line is broken
- BUG: table formatting for header appears to be one character off
- BUG: vertical scrolling in console broken
- BUG: sub_sequence isn't handling multiple pieces correctly with different start column
- BUG: delete_at where deleting at the end of a piece isn't working
- BUG: need a way to align pieces to a start column.
- OFF STREAM | BUG: parsing for a plausible command string doesn't work at bottom edge
- BUG: console table formatting isn't quite right
- BUG: how to handle cursor movements related to inserted elements
- BUG: document should clamp inserts so they're within the specified width
- BUG: sub_sequence not padding first non-adjacent piece
- BUG: find_for_insert isn't handling first non-adjacent piece correctly
- BUG: undo of "nullptr" sentinel works but we don't have any information
       to pass back to the UI so we can adjust the caret
- MISSING: undo/redo need to return # of lines/columns affected & is_delete?
- encapsulate current SDL_Event data into our own data structure and update interface
- filter out non-ASCII characters during input
- joystick events
- joystick hat motion is a bitmask: 0 for centered
    * need to track continuous state for each direction bit, toggling the bits for events that come in
    * return true/false based on the continuous state per joystick
- preferences: key binding data structure and implementation
    - add serialization/deserialization code to input_action & input_binding so we can write to preferences.yaml
- consolidate each state's header view into one new state_header view
- refactor console and source editor's footer into one document_footer view
- implement a column-based pick list where each row is a panel that can have column labels & column buttons
- implement machine pick list state + UI
    - list out table of machines, e.g. ID, name
    - edit & delete buttons on each line
    - scrollable
    - add new machine button at bottom
