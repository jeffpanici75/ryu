THINGS TO DO
------------

Project & Admin tasks
---------------------

- Flesh out README.md for GitHub

- Create website for Ryu project

Thoughts & Questions
----------------------

- should we add a "clear symbols" command?

- should we clear the symbol table during close project?

- should ROM even be write protected during "development"?
    * should we issue errors when trying to write unlatched ROM
    * maybe the write latch should be disabled only during emulation/distribution
    * OR maybe the write latch is controlled through the environment file

IDE UI & related tasks
----------------------

- core::document: re-implement API surface with new core::piece_table_t
    * unit tests to verify document is working
    * columnar mode by setting span start/end and caret operates within this boundary

- core::console: re-implement integration with core::document
    * core::formatted_text_t vs core::attr_span_t
    * wire up new events for select/cut/copy/paste

- core::text_editor: re-implement integration with core::document

- encapsulate SDL_Event into core::event so we don't bleed SDL stuff everywhere
    - need to explicitly filter out non-ASCII characters during input
    - implement mouse events for context tabs

- implement ability to redirect to new or appended text file in core::console

- bug: console header, project and machine fields not properly resizing

- figure out how to surface errors & other messages for display in editors, e.g. source_editor, memory_editor.

- implement core::observable model so the UI can register to receive events from the underlying model

- implement full & correct machine editor interface

- implement full & correct project editor interface + shortcut selection UI

- implement palette editor

- implement tile/sprite editor

- implement preferences UI

- look for good tab-like bitmaps instead of poly draws

Lower Priority Clean-up tasks
-----------------------------

- refactor once_column_t struct to live with his table buddies and make more generic

- add helper to table to generate empty row

- add serialize interface for use by ast_node_t and apply to value structs


Emulator & related tasks
------------------------

- implement integrated_circuit subclass for midway_mcr_video_generator that displays background map of tiles &
  foreground layer of sprites, controller initially through memory_editor & commands

- implement integrated_circuit subclass for joystick input

DONE
----
- create new struct that packages up source text/stream to parse, chunked lines, and formatted lines
- core::environment now has fields for core::command_parser and core::evaluator and optimized assignment of
  symbol table and assembler pointers to these instances.
- OFFSTREAM: categorize help and ordering so they're consistent
- OFFSTREAM: added @[.b|.w|.dw] for peek
- OFFSTREAM: added ^[.b|.w|.dw] for poke
- OFFSTREAM: implemented core::environment::fill_memory
- implement a target command so that assembly isn't necessarily required
- implement help [cmd] detail variant
- implement core::environment::on_read_binary_to_memory
- OFF STREAM|FIXED: fmt::format should recognize our custom types because we have a std::ostream operator<< override.
                    however, it isn't working the way I'd expect, so need to research.
                    SOLUTION: was missing #include <fmt/ostream.h>
- OFF STREAM|FIXED: core::console now formats styled text correctly!
- OFF STREAM      : more behavior in console is now optional and activated by using the @| operator
- OFF STREAM      : added @> and @>> redirection operators to console commands
- OFF STREAM|FIXED: font_family::add_style now uses space to get a proper width measurement
- OFF STREAM|FIXED: core::console and core::text_editor now measure the chunks to get the most accurate width
- OFF STREAM      : updated to latest Hack font TTF files
- OFF STREAM|FIXED: parser wasn't setting _token to nullptr in reset.
- OFF STREAM      : implement dip_switch subclass for integrated_circuit
- implement core::environment::on_write_memory_to_binary
- implement core::environment::on_copy_memory
- implement core::environment::on_search_memory
- implement core::environment::on_memory_map to dump
  out the memory map of the active machine
- OFF STREAM|FIXED: BUG: parser is skipping first character of identifier
                           EXAMPLE: set debug true
                           NOTE: looks to be related to the text "debug"; not sure why
                           RESULT: parser is seeing "ebug"
- OFF STREAM      : when switching env, actually assemble file
- OFF STREAM      : implement edenv command
- OFF STREAM|FIXED: % command working again for source editor and environments
- implement remaining memory commands in core::environment
- add . a/k/a "source" command that calls apply_environment again on the currently active environment
- Add Ryu & other project information to Twitch profile & banner bitmap
- configure weechat to limit width of handles to prevent column scrunching
- unit tests!?  whaaaaaa you SAY?  OMG!  NOOOOOO!
- OFF STREAM      : cleaned up piece_table_t and related interfaces
- OFF STREAM      : implement most of delete_at.  one case remaining where delete crosses pieces.
- core::piece_table_t: undo/redo
    * rename insert to insert_at for consistency
    * reworking insert_at & delete_at to make copies and swap chains
    * remove std::list<> and use std::shared_ptr<core::piece_node_t> instead for doubly-linked list
- core::piece_table_t: undo/redo
- core::piece_table_t: selection (includes marks)/cut/copy/paste
- turn off irc events in weechat
- finish delete_at span multiple pieces scenario
- piece_table_t::copy requires custom version of sequence/copy_elements
